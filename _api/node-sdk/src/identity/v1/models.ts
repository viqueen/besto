/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: identity/v1/models.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum IdentityProvider {
    UNSPECIFIED = 0,
    GOOGLE = 1,
    GITHUB = 2
}
export class GoogleProfile extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        email?: string;
        name?: string;
        given_name?: string;
        family_name?: string;
        picture?: string;
        locale?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("given_name" in data && data.given_name != undefined) {
                this.given_name = data.given_name;
            }
            if ("family_name" in data && data.family_name != undefined) {
                this.family_name = data.family_name;
            }
            if ("picture" in data && data.picture != undefined) {
                this.picture = data.picture;
            }
            if ("locale" in data && data.locale != undefined) {
                this.locale = data.locale;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get given_name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set given_name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get family_name() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set family_name(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get picture() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set picture(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get locale() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set locale(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        id?: string;
        email?: string;
        name?: string;
        given_name?: string;
        family_name?: string;
        picture?: string;
        locale?: string;
    }): GoogleProfile {
        const message = new GoogleProfile({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.given_name != null) {
            message.given_name = data.given_name;
        }
        if (data.family_name != null) {
            message.family_name = data.family_name;
        }
        if (data.picture != null) {
            message.picture = data.picture;
        }
        if (data.locale != null) {
            message.locale = data.locale;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            email?: string;
            name?: string;
            given_name?: string;
            family_name?: string;
            picture?: string;
            locale?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.given_name != null) {
            data.given_name = this.given_name;
        }
        if (this.family_name != null) {
            data.family_name = this.family_name;
        }
        if (this.picture != null) {
            data.picture = this.picture;
        }
        if (this.locale != null) {
            data.locale = this.locale;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.email.length)
            writer.writeString(2, this.email);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.given_name.length)
            writer.writeString(4, this.given_name);
        if (this.family_name.length)
            writer.writeString(5, this.family_name);
        if (this.picture.length)
            writer.writeString(6, this.picture);
        if (this.locale.length)
            writer.writeString(7, this.locale);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GoogleProfile {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GoogleProfile();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.email = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.given_name = reader.readString();
                    break;
                case 5:
                    message.family_name = reader.readString();
                    break;
                case 6:
                    message.picture = reader.readString();
                    break;
                case 7:
                    message.locale = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GoogleProfile {
        return GoogleProfile.deserialize(bytes);
    }
}
export class GithubProfile extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        email?: string;
        name?: string;
        login?: string;
        avatar_url?: string;
        html_url?: string;
        location?: string;
        bio?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("login" in data && data.login != undefined) {
                this.login = data.login;
            }
            if ("avatar_url" in data && data.avatar_url != undefined) {
                this.avatar_url = data.avatar_url;
            }
            if ("html_url" in data && data.html_url != undefined) {
                this.html_url = data.html_url;
            }
            if ("location" in data && data.location != undefined) {
                this.location = data.location;
            }
            if ("bio" in data && data.bio != undefined) {
                this.bio = data.bio;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get login() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set login(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get avatar_url() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set avatar_url(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get html_url() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set html_url(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get location() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set location(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get bio() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set bio(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        id?: string;
        email?: string;
        name?: string;
        login?: string;
        avatar_url?: string;
        html_url?: string;
        location?: string;
        bio?: string;
    }): GithubProfile {
        const message = new GithubProfile({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.login != null) {
            message.login = data.login;
        }
        if (data.avatar_url != null) {
            message.avatar_url = data.avatar_url;
        }
        if (data.html_url != null) {
            message.html_url = data.html_url;
        }
        if (data.location != null) {
            message.location = data.location;
        }
        if (data.bio != null) {
            message.bio = data.bio;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            email?: string;
            name?: string;
            login?: string;
            avatar_url?: string;
            html_url?: string;
            location?: string;
            bio?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.login != null) {
            data.login = this.login;
        }
        if (this.avatar_url != null) {
            data.avatar_url = this.avatar_url;
        }
        if (this.html_url != null) {
            data.html_url = this.html_url;
        }
        if (this.location != null) {
            data.location = this.location;
        }
        if (this.bio != null) {
            data.bio = this.bio;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.email.length)
            writer.writeString(2, this.email);
        if (this.name.length)
            writer.writeString(3, this.name);
        if (this.login.length)
            writer.writeString(4, this.login);
        if (this.avatar_url.length)
            writer.writeString(5, this.avatar_url);
        if (this.html_url.length)
            writer.writeString(6, this.html_url);
        if (this.location.length)
            writer.writeString(7, this.location);
        if (this.bio.length)
            writer.writeString(8, this.bio);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GithubProfile {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GithubProfile();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.email = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.login = reader.readString();
                    break;
                case 5:
                    message.avatar_url = reader.readString();
                    break;
                case 6:
                    message.html_url = reader.readString();
                    break;
                case 7:
                    message.location = reader.readString();
                    break;
                case 8:
                    message.bio = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GithubProfile {
        return GithubProfile.deserialize(bytes);
    }
}
export class IdentityProfile extends pb_1.Message {
    #one_of_decls: number[][] = [[5, 6]];
    constructor(data?: any[] | ({
        id?: string;
        provider?: IdentityProvider;
        profile_id?: string;
        profile_email?: string;
    } & (({
        google?: GoogleProfile;
        github?: never;
    } | {
        google?: never;
        github?: GithubProfile;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("provider" in data && data.provider != undefined) {
                this.provider = data.provider;
            }
            if ("profile_id" in data && data.profile_id != undefined) {
                this.profile_id = data.profile_id;
            }
            if ("profile_email" in data && data.profile_email != undefined) {
                this.profile_email = data.profile_email;
            }
            if ("google" in data && data.google != undefined) {
                this.google = data.google;
            }
            if ("github" in data && data.github != undefined) {
                this.github = data.github;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get provider() {
        return pb_1.Message.getFieldWithDefault(this, 2, IdentityProvider.UNSPECIFIED) as IdentityProvider;
    }
    set provider(value: IdentityProvider) {
        pb_1.Message.setField(this, 2, value);
    }
    get profile_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set profile_id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get profile_email() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set profile_email(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get google() {
        return pb_1.Message.getWrapperField(this, GoogleProfile, 5) as GoogleProfile;
    }
    set google(value: GoogleProfile) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_google() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get github() {
        return pb_1.Message.getWrapperField(this, GithubProfile, 6) as GithubProfile;
    }
    set github(value: GithubProfile) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get has_github() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get profile() {
        const cases: {
            [index: number]: "none" | "google" | "github";
        } = {
            0: "none",
            5: "google",
            6: "github"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5, 6])];
    }
    static fromObject(data: {
        id?: string;
        provider?: IdentityProvider;
        profile_id?: string;
        profile_email?: string;
        google?: ReturnType<typeof GoogleProfile.prototype.toObject>;
        github?: ReturnType<typeof GithubProfile.prototype.toObject>;
    }): IdentityProfile {
        const message = new IdentityProfile({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.provider != null) {
            message.provider = data.provider;
        }
        if (data.profile_id != null) {
            message.profile_id = data.profile_id;
        }
        if (data.profile_email != null) {
            message.profile_email = data.profile_email;
        }
        if (data.google != null) {
            message.google = GoogleProfile.fromObject(data.google);
        }
        if (data.github != null) {
            message.github = GithubProfile.fromObject(data.github);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            provider?: IdentityProvider;
            profile_id?: string;
            profile_email?: string;
            google?: ReturnType<typeof GoogleProfile.prototype.toObject>;
            github?: ReturnType<typeof GithubProfile.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.provider != null) {
            data.provider = this.provider;
        }
        if (this.profile_id != null) {
            data.profile_id = this.profile_id;
        }
        if (this.profile_email != null) {
            data.profile_email = this.profile_email;
        }
        if (this.google != null) {
            data.google = this.google.toObject();
        }
        if (this.github != null) {
            data.github = this.github.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.provider != IdentityProvider.UNSPECIFIED)
            writer.writeEnum(2, this.provider);
        if (this.profile_id.length)
            writer.writeString(3, this.profile_id);
        if (this.profile_email.length)
            writer.writeString(4, this.profile_email);
        if (this.has_google)
            writer.writeMessage(5, this.google, () => this.google.serialize(writer));
        if (this.has_github)
            writer.writeMessage(6, this.github, () => this.github.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IdentityProfile {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IdentityProfile();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.provider = reader.readEnum();
                    break;
                case 3:
                    message.profile_id = reader.readString();
                    break;
                case 4:
                    message.profile_email = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.google, () => message.google = GoogleProfile.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.github, () => message.github = GithubProfile.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): IdentityProfile {
        return IdentityProfile.deserialize(bytes);
    }
}
export class Identity extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        profile?: IdentityProfile;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("profile" in data && data.profile != undefined) {
                this.profile = data.profile;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get profile() {
        return pb_1.Message.getWrapperField(this, IdentityProfile, 2) as IdentityProfile;
    }
    set profile(value: IdentityProfile) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_profile() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        id?: string;
        profile?: ReturnType<typeof IdentityProfile.prototype.toObject>;
    }): Identity {
        const message = new Identity({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.profile != null) {
            message.profile = IdentityProfile.fromObject(data.profile);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            profile?: ReturnType<typeof IdentityProfile.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.profile != null) {
            data.profile = this.profile.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.has_profile)
            writer.writeMessage(2, this.profile, () => this.profile.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Identity {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Identity();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.profile, () => message.profile = IdentityProfile.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Identity {
        return Identity.deserialize(bytes);
    }
}

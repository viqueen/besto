/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: identity/v1/identity_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./models";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class SignUpRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        profile?: dependency_1.IdentityProfile;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("profile" in data && data.profile != undefined) {
                this.profile = data.profile;
            }
        }
    }
    get profile() {
        return pb_1.Message.getWrapperField(this, dependency_1.IdentityProfile, 1) as dependency_1.IdentityProfile;
    }
    set profile(value: dependency_1.IdentityProfile) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_profile() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        profile?: ReturnType<typeof dependency_1.IdentityProfile.prototype.toObject>;
    }): SignUpRequest {
        const message = new SignUpRequest({});
        if (data.profile != null) {
            message.profile = dependency_1.IdentityProfile.fromObject(data.profile);
        }
        return message;
    }
    toObject() {
        const data: {
            profile?: ReturnType<typeof dependency_1.IdentityProfile.prototype.toObject>;
        } = {};
        if (this.profile != null) {
            data.profile = this.profile.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_profile)
            writer.writeMessage(1, this.profile, () => this.profile.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignUpRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignUpRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.profile, () => message.profile = dependency_1.IdentityProfile.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignUpRequest {
        return SignUpRequest.deserialize(bytes);
    }
}
export class SignUpResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        identity?: dependency_1.Identity;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("identity" in data && data.identity != undefined) {
                this.identity = data.identity;
            }
        }
    }
    get identity() {
        return pb_1.Message.getWrapperField(this, dependency_1.Identity, 1) as dependency_1.Identity;
    }
    set identity(value: dependency_1.Identity) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_identity() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        identity?: ReturnType<typeof dependency_1.Identity.prototype.toObject>;
    }): SignUpResponse {
        const message = new SignUpResponse({});
        if (data.identity != null) {
            message.identity = dependency_1.Identity.fromObject(data.identity);
        }
        return message;
    }
    toObject() {
        const data: {
            identity?: ReturnType<typeof dependency_1.Identity.prototype.toObject>;
        } = {};
        if (this.identity != null) {
            data.identity = this.identity.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_identity)
            writer.writeMessage(1, this.identity, () => this.identity.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignUpResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignUpResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.identity, () => message.identity = dependency_1.Identity.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignUpResponse {
        return SignUpResponse.deserialize(bytes);
    }
}
export class SignInRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        profile?: dependency_1.IdentityProfile;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("profile" in data && data.profile != undefined) {
                this.profile = data.profile;
            }
        }
    }
    get profile() {
        return pb_1.Message.getWrapperField(this, dependency_1.IdentityProfile, 1) as dependency_1.IdentityProfile;
    }
    set profile(value: dependency_1.IdentityProfile) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_profile() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        profile?: ReturnType<typeof dependency_1.IdentityProfile.prototype.toObject>;
    }): SignInRequest {
        const message = new SignInRequest({});
        if (data.profile != null) {
            message.profile = dependency_1.IdentityProfile.fromObject(data.profile);
        }
        return message;
    }
    toObject() {
        const data: {
            profile?: ReturnType<typeof dependency_1.IdentityProfile.prototype.toObject>;
        } = {};
        if (this.profile != null) {
            data.profile = this.profile.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_profile)
            writer.writeMessage(1, this.profile, () => this.profile.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.profile, () => message.profile = dependency_1.IdentityProfile.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignInRequest {
        return SignInRequest.deserialize(bytes);
    }
}
export class SignInResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        identity?: dependency_1.Identity;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("identity" in data && data.identity != undefined) {
                this.identity = data.identity;
            }
        }
    }
    get identity() {
        return pb_1.Message.getWrapperField(this, dependency_1.Identity, 1) as dependency_1.Identity;
    }
    set identity(value: dependency_1.Identity) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_identity() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        identity?: ReturnType<typeof dependency_1.Identity.prototype.toObject>;
    }): SignInResponse {
        const message = new SignInResponse({});
        if (data.identity != null) {
            message.identity = dependency_1.Identity.fromObject(data.identity);
        }
        return message;
    }
    toObject() {
        const data: {
            identity?: ReturnType<typeof dependency_1.Identity.prototype.toObject>;
        } = {};
        if (this.identity != null) {
            data.identity = this.identity.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_identity)
            writer.writeMessage(1, this.identity, () => this.identity.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignInResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignInResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.identity, () => message.identity = dependency_1.Identity.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignInResponse {
        return SignInResponse.deserialize(bytes);
    }
}
export class SignOutRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): SignOutRequest {
        const message = new SignOutRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignOutRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignOutRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignOutRequest {
        return SignOutRequest.deserialize(bytes);
    }
}
export class SignOutResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): SignOutResponse {
        const message = new SignOutResponse({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignOutResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignOutResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SignOutResponse {
        return SignOutResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedIdentityServiceService {
    static definition = {
        SignIn: {
            path: "/IdentityService/SignIn",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SignInRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SignInRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: SignInResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => SignInResponse.deserialize(new Uint8Array(bytes))
        },
        SignUp: {
            path: "/IdentityService/SignUp",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SignUpRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SignUpRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: SignUpResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => SignUpResponse.deserialize(new Uint8Array(bytes))
        },
        SignOut: {
            path: "/IdentityService/SignOut",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SignOutRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SignOutRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: SignOutResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => SignOutResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract SignIn(call: grpc_1.ServerUnaryCall<SignInRequest, SignInResponse>, callback: grpc_1.sendUnaryData<SignInResponse>): void;
    abstract SignUp(call: grpc_1.ServerUnaryCall<SignUpRequest, SignUpResponse>, callback: grpc_1.sendUnaryData<SignUpResponse>): void;
    abstract SignOut(call: grpc_1.ServerUnaryCall<SignOutRequest, SignOutResponse>, callback: grpc_1.sendUnaryData<SignOutResponse>): void;
}
export class IdentityServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedIdentityServiceService.definition, "IdentityService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    SignIn: GrpcUnaryServiceInterface<SignInRequest, SignInResponse> = (message: SignInRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SignInResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SignInResponse>, callback?: grpc_1.requestCallback<SignInResponse>): grpc_1.ClientUnaryCall => {
        return super.SignIn(message, metadata, options, callback);
    };
    SignUp: GrpcUnaryServiceInterface<SignUpRequest, SignUpResponse> = (message: SignUpRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SignUpResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SignUpResponse>, callback?: grpc_1.requestCallback<SignUpResponse>): grpc_1.ClientUnaryCall => {
        return super.SignUp(message, metadata, options, callback);
    };
    SignOut: GrpcUnaryServiceInterface<SignOutRequest, SignOutResponse> = (message: SignOutRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SignOutResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SignOutResponse>, callback?: grpc_1.requestCallback<SignOutResponse>): grpc_1.ClientUnaryCall => {
        return super.SignOut(message, metadata, options, callback);
    };
}
